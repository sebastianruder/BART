/*
 * Copyright 2007 EML Research
 * Copyright 2007 Project ELERFED
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package elkfed.mmax.pipeline;

import java.util.HashMap;
import java.util.Map;
import elkfed.mmax.minidisc.MarkableLevel;
import elkfed.mmax.minidisc.MiniDiscourse;
import java.util.Set;

/** Abstract class for pipeline components.  Each pipeline component must 
 * implement the following methods:
 * 
 * {@link #getLevelName()},
 * {@link #annotateDocument()}, and
 * {@link #addMarkables()}.
 * <p>
 * annotateDocument() and addMarkables() will be called for each document in the
 * corpus, which will be stored in currentDocument.  The component is expected
 * to add markables of the level given in getLevelName().
 *
 * @author ponzo
 */
public abstract class PipelineComponent
{    
    /** The tag attribute of markables */
    public static final String TAG_ATTRIBUTE = "tag";

    /** The mmax level attribute of markables */
    public static final String MMAX_LEVEL_ATTRIBUTE = "mmax_level";
    
    /** The current document annotated by the component */
    protected MiniDiscourse currentDocument;
    
    /** The current markable level operated by the component */
    protected MarkableLevel currentLevel;
    
    /** The name of the markable level generated by the component */
    protected final String levelName;
    
    /** The attributes of the markable level */
    protected final Map<String,String> levelAttributes;

    /* A buffer for string juggling */
    protected final StringBuffer buffer;
    
    /** Creates a new instance of PipelineComponent and gets this component's
     * level name from getLevelName().
     */
    public PipelineComponent()
    { 
        this.levelName = getLevelName();
        
        this.levelAttributes = new HashMap<String,String>();
        this.levelAttributes.put(MMAX_LEVEL_ATTRIBUTE, levelName);
        
        this.buffer = new StringBuffer();
    }
    
    /** getLevelName() returns the markable level of this pipeline component.
     * This must be instantiated by each subclass.
     */
    public abstract String getLevelName();
    
    /** Annotates the corpus given in <code>data</code> by calling
     * annotateDocument() and addMarkables() for each document in the corpus.
     *
     * @param data  the corpus to be annotated
     */
    public void annotate(MiniDiscourse doc)
    {
            this.currentDocument = doc;
            this.currentLevel = doc.getMarkableLevelByName(levelName);
            
            annotateDocument();
            addMarkables();
            
            currentLevel.saveMarkables();
    }

    /** Annotates the data found in the Document <code>currentDocument</code>. */
    protected abstract void annotateDocument();

    /** Adds the markables created in annotateDocument() to 
     * <code>currentLevel</code>.
     */
    protected abstract void addMarkables();
    
    /** checks that the levels needed for input will be present at
     * running time, by looking them up in either processedLevels or
     * goldLevels, and adds the levels created to processedLevels.
     */
    public void checkLevels(Set<String> processedLevels,
            Set<String> goldLevels) {
        processedLevels.add(getLevelName());
    }
}
